#include "common.h"
#include "lmodel.h"
#include "shadow.h"

#include "stalker_Shadows.h"

float RayAttenBorder (float2 pos, float value)
{
	float borderDist = min(1.0 - max(pos.x, pos.y), min(pos.x, pos.y));
	return saturate(borderDist > value ? 1.0 : borderDist / value);
}

//////////////////////////////////////////////////////////////////////////////////////////
// This is the basic primitive used by convex, volumetric lights
// for example spot-lights, one face of the omni lights, etc.
//////////////////////////////////////////////////////////////////////////////////////////
// following options are available to configure compilation:
// USE_LMAP
// USE_LMAPXFORM
// USE_SHADOW
//////////////////////////////////////////////////////////////////////////////////////////

uniform float4 m_lmap[2];

#ifdef STALKER_CHECKERBOARD_RENDERING
	float4 	main(AccumBaseVertexOuput Input) : COLOR
#else
	void main 
	( 
		AccumBaseVertexOuput Input,
		out float4 outDiffuse : COLOR0,
		out float4 outSpecular : COLOR1
	)
#endif
{
	// COORD
	float2 uv = Input.tc.xy / Input.tc.w;
	int2 pos = uv * STALKER_SCREEN_SIZE.xy;
	//

	// G-BUFFER
	float4 gBuffer0 = tex2D(s_position, uv);
		if(gBuffer0.z <= 0 ) gBuffer0.z = dx_Viewport_Params.y;
		if(gBuffer0.w <= 0 ) gBuffer0.w = 1.0f;
	float4 gBuffer1 = tex2D(s_normal, uv);
	float4 gBuffer2 = tex2D(s_diffuse, uv);
	float4 gBuffer3 = tex2D(s_depth, uv);
	//
	
	GBufferData data = DataFromGBuffer(gBuffer0, gBuffer1, gBuffer2, gBuffer3);

	// DATA
	//float4 positionView	= tex2Dproj(s_position, Input.tc);
	//float4  normalView = tex2Dproj (s_normal, Input.tc);

	// DATA
	float ambientOcclusionBaked = data.occlusion;
				
	float materialID = data.materialID;
	
	float depth = data.depth;
	
	float linearDepth = data.position.z /*LinearDepth(depth)*/;

    float3 positionView = /*data.position*/ float3(linearDepth * (pos * dx_Pos_Decompression_Params.zw - dx_Pos_Decompression_Params.xy), linearDepth);

	float3 normalView = normalize(data.normal);
	
	float3 albedo = data.diffuseColor;
	float3 specularColor = data.specularColor;
	
	float smoothness = data.smoothness;
	//

	// RANDOM
	float dither =	 Dither8x8Bayer
	(
		fmod(pos.x, 8.0f),
		fmod(pos.y, 8.0f)
	);
	
	float4 blueNoise = tex2D(s_bluenoise, uv * (STALKER_SCREEN_SIZE.xy) / 1024);
	
	#ifdef STALKER_USE_TAA
		blueNoise.x = fmod(blueNoise.x + (GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.y = fmod(blueNoise.y + (GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.z = fmod(blueNoise.z + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.w = fmod(blueNoise.w + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
		
	float interleavedGradientNoise = InterleavedGradientNoise(pos);
	
	#ifdef STALKER_USE_TAA
		interleavedGradientNoise = fmod(interleavedGradientNoise + (GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
	
	float2 rotation; 
	sincos(blueNoise.x * STALKER_TWO_PI, rotation.x, rotation.y);
	//

	// BRDF
	float rsqr;
	float3	diffuseDirect, specularDirect;
	plight_local(diffuseDirect, specularDirect, specularColor, smoothness, positionView, normalView, Ldynamic_pos.xyz, Ldynamic_pos.w, rsqr);

	// SHADOWS
	float4 P4 = float4(positionView.xyz, 1.0f);
	float4 PS = mul(m_shadow, P4);
	float shadows = 1.0f;
	
	#ifdef USE_SHADOW
		shadows = sunmask(P4);
		
		#ifdef USE_SJITTER
		  shadows *= shadow_jitter(PS, uv * STALKER_SCREEN_SIZE / 1024);
		#else
		  shadows *= shadow(PS);
		#endif
	#endif
	
    // SSRS
    #if defined (USE_SHADOW) && defined (STALKER_USE_SSRS_POINT_SPOT)
        float rayLength = STALKER_SSRS_POINT_SPOT_RAY_LENGTH;
		float3 viewRay = normalize(positionView);

		float4 screenSpacePos  = float4(uv, depth, 1.0f);
		
		float2 Xi = blueNoise.xy;

        float3 L2P = positionView - Ldynamic_pos.xyz;
	    float3 L = normalize(L2P);

		float3 screenSpaceReflectionVec = float3(L.xy - positionView.xy  / positionView.z * L.z, L.z / positionView.z) * dx_Projection_Params.xyz;
			
		const int NUM_RAY_MARCH_SAMPLES = 12;
		
		const float SIZE_RAY_MARCH_STEPS = (rayLength / ((float)NUM_RAY_MARCH_SAMPLES)) / linearDepth;
		
		float reflectionRayMarchStep = SIZE_RAY_MARCH_STEPS;
		reflectionRayMarchStep = reflectionRayMarchStep * (interleavedGradientNoise) + reflectionRayMarchStep;

		float3 raySample = screenSpacePos;

		int hitFail = 0;
		[unroll (NUM_RAY_MARCH_SAMPLES)]
		for (int rayStepIdx = 0; rayStepIdx < NUM_RAY_MARCH_SAMPLES; rayStepIdx++)
		{
			float ZBufferVal = tex2Dlod(s_position, float4(raySample.xy,0,0)).w;
					if(ZBufferVal <= 0 ) ZBufferVal = 1.0f;
					
			float delta = raySample.z - ZBufferVal;

			float thickness = 0.01f / linearDepth;
	
			if (0.0f < delta && delta < thickness)
			{
				hitFail = 1;
				break;
			}

			raySample += screenSpaceReflectionVec * reflectionRayMarchStep;

            //reflectionRayMarchStep *= 1.0f + SIZE_RAY_MARCH_STEPS; // Increase step size after each iteration
		}

		shadows *= lerp(1.0f, 1.0f - hitFail, RayAttenBorder(raySample.xy, 0.0625f));
    #endif

	// LIGHTMAP
	float4 lightmap = 1.0f;
	#ifdef USE_LMAP
		#ifdef USE_LMAPXFORM
			PS.x = dot(P4, m_lmap[0]);
			PS.y = dot(P4, m_lmap[1]);
		#endif
		lightmap = tex2Dproj(s_lmap, PS);
	#endif
	
	float3 radiance = Ldynamic_color.rgb;
	
	outDiffuse = float4(diffuseDirect * radiance * shadows * lightmap.rgb, 0.0f);
	outSpecular = float4(specularDirect * radiance * shadows * lightmap.rgb, 0.0f);
}
